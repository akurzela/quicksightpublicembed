# How to Publicly embed your quicksight dashboard into your react application using aws sdk

Using embedded analytics from Amazon Quicksight can simplify the process of equipping your application with functional visualisations without any complex development. There are multiple ways to embed Amazon Quicksight dashboards into application. In this workshop we will look at how it can be done using React and AWS SDK. 

Today we will work with:
1.	Amazon Quicksight
2.	Amazon API Gateway
3.	AWS Lambda
4.  AWS Identity and Access Management (IAM)

Below you can find an architecture of the solution we are going to deploy.

![](./Images/Architecture.png)

Above, a user makes a request to Amazon API gateway that executes a Lambda function which in turn will make a call to QuickSight to request an embed URL that returns the dashboard. Lambda function assumes a role that has required permissions to create anonymous embed URLs. 
## Prerequisites
- An AWS Account
- An Amazon Quicksight account with session capacity pricing enabled
-	An Amazon Quicksight dashboard (see [AWS documentation](https://docs.aws.amazon.com/quicksight/latest/user/example-analysis.html) for more detailed steps on how to create one)
-	A sample React appliacation ([here](https://reactjs.org/docs/create-a-new-react-app.html#create-react-app) you can find steps on how to start)

## AWS Workshop Portal

If you are on **WebDevCon** we will provide you with accounts from Event Engine. In this case, please connect to the portal by clicking the following link or browsing to https://dashboard.eventengine.run/. You will need the Participant Hash the presenters are going to send you on Slack and your email address and password to login as an **employee**. 

## Step 0: Create your Cloud9 environment and your Amazon Quicksight dashboard

### Cloud9 Environment
In the AWS console, search for Cloud9 or use [this](https://console.aws.amazon.com/cloud9/home?region=us-east-1) link and click on the orange button to create a Cloud9 environment:

![](./Images/cloud9-create.png)

Next, fill in the form using the same information from the images below:
![](./Images/cloud9-wiz1.png)
![](./Images/cloud9-wiz2.png)

### Quicksight Environment
In the AWS console, search for QuickSight or use [this](https://quicksight.aws.amazon.com/) link. In case Amazon QuickSight is acessed for the first time, it needs to be configured for use. If this is your case, you will be presented with a screen like the one below:
![](./Images/qs-1.png)

Click on *Sign up for QuickSight* and you will be presented with an account configuration form. Select *Enterprise* and click on *Continue*:
![](./Images/qs-2.png)

Finally, leave all options in their defaults and make sure you configure an account name and a notification e-mail address. The account name should be in the format **webdevconf-MY_AMZN_LOGIN** and the notification e-mail should be your own amazon e-mail address. An example for user lddecaro@ is shown below:
![](./Images/qs-4.png)

### Quicksight Dashboard
In the AWS console, search for Quicksight or use [this](https://quicksight.aws.amazon.com/) link.

### Create an analysis
In the left hand side menu navigate to *Analyses* and click on the *New analysis* button in the right top corner. 
You will be able to see sample datasets automatically generated when you create an account in Amazon QuickSight. 
- Business overview
- People overview
- Sales pipeline
- Web and marketing analytics
These datasets were created by 47Lining, an AWS Advanced Consulting Partner with Big Data Competency designation.

### Add a visual
Pick *People Overview* and select *USE IN ANALYSIS*
![](./Images/Pick_dataset.png)
Click on the field wells to to expand the fields. 
![](./Images/Quicksight_Step1.png)
In the field list on the lef hand side, pick *Business Function* and place it in the Y axis, then pick *Employee ID* and place it in the Value field. Next, in the visual types menu select a *Pie chart*. 
![](./Images/Quicksight_Step2.png)

### Change the title
Next, double-click on the title of the visual *Count of Employee Id by Business Function* and change it to: *Employee Business Function Percentage Split*. 
![](./Images/Title.png)

### Publish the dashboard
Navigate to the top right corner and ficlick on the *publish icon*. Next, select *publish dashboard*.
![](./Images/Quicksight_Step3.png)

Select *Publish Dashboard as*, give it a name ie. *"My Awesome Dashboard"* and click on "Publish dashboard"
![](./Images/Quicksight_Step4.png)

<!-- After publishing your dashboard, write down in a separate notepad `<YOUR_DASHBOARD_ID>` from the URL of your web browser. For your convenience, this is highlighted in the image below:
![](./Images/qs-5.png) -->

## Step 1: Create your react application
Go to your Cloud9 instance and create React app using `npx create-react-app quicksightembedreact` command. It will generate a React project for you.
![](./Images/Cloud9_Step1.png)

## Step 2: In your AWS account, set up permissions for unauthenticated viewers

Before creating the IAM Policy and Role, run the following two commands on the terminal of your Cloud9 instance to retrieve the DASHBOARD_ID of your quicksight dashboard:
```
export acct=$(aws sts get-caller-identity --query Account --output text)
aws quicksight list-dashboards --aws-account-id $acct --query DashboardSummaryList[0].DashboardId --output text
```
![](./Images/cloud9-4.png)

Make sure to change in the policy below the value of the token **<YOUR_DASHBOARD_ID>** with the value of the Dashboard Id.

Go to IAM. Create a policy in AWS Identity and Access Management (IAM) that your application will assume on behalf of the viewer. Go to **Policies** and select **Create policy** button. Next, choose a JSON tab and paste a policy that looks as following:
```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "quicksight:GenerateEmbedUrlForAnonymousUser"
            ],
            "Resource": [
                "arn:aws:quicksight:*:*:namespace/default",
                "arn:aws:quicksight:*:*:dashboard/<YOUR_DASHBOARD_ID>"
            ],
            "Effect": "Allow"
        },
        {
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
            ],
            "Resource": "*",
            "Effect": "Allow"
        }
    ]
}
```

Give your policy name like: **AnonymousEmbedPolicy** and select **Create policy** button.

![](./Images/Picture1.png)
Next, create a role to which we will be attaching the **AnonymousEmbedPolicy**.
Go to **Roles** and select **Create role** button. 
As a trusted entity select: **Lambda** and in the next screen search for **AnonymousEmbedPolicy**. 
Check the box next to the policy name and select **Next**. 
In the Name, Review, Create section, give your role a name like: **AnonymousEmbedRole**. Make sure that the policy name is included in the **Add permissions** section.
## Step 3: Generate anonymous embed URL lambda

### Retrieving the Cloud9 domain

<!-- We need to add the Cloud9 domain into allow list in Amazon Quicksight. Run the following two commands to get the domain of your Cloud9 instance:

```
export env=$(aws cloud9 list-environments --query environmentIds[0] --output text)
echo "$(aws cloud9 describe-environments --environment-ids $env --query environments[0].id --output text).vfs.cloud9.us-east-1.amazonaws.com"
``` -->

On your Cloud9, click on *Preview* and *Preview Running Application*. 
![](./Images/cloud9-1.png)
Cloud9 will try to open an emdedded browser and we need to click on the icon from the image below to try to open it a new browser window.
![](./Images/cloud9-2.png)
Then, we need to copy the URL from the new browser window so we can use it on a later moment. For now, write down the URL in the format **https://#######################.vfs.cloud9.us-east-1.amazonaws.com** on a separate note. We will use this URL to replace the value of the placeholder `[CLOUD9URLPLACEHOLDER]` in the next step. 

Make sure you copy the URL including the protocol (https://) and **do not** add the forward slash at the end.

![](./Images/cloud9-3.png)

Create a lambda function that generates the embed URL for the dashboard.  

In the AWS Console Go to Lambda and select function button.
Choose:
- Author from scratch
- Function Name: **AnonymousEmbedFunction**
- Runtime: Python 3.9
- Execution role: Use an existing role
- Select AnonymousEmbedRole from drop down. Click Create function.
In the Code tab, paste the code below:

```
import json, boto3, os, re, base64

def lambda_handler(event, context):

    try:
        def getQuickSightDashboardUrl(awsAccountId, dashboardIdList, dashboardRegion):
            #Create QuickSight client
            quickSight = boto3.client('quicksight', region_name=dashboardRegion);
            #Construct dashboardArnList from dashboardIdList
            dashboardArnList=[ 'arn:aws:quicksight:'+dashboardRegion+':'+awsAccountId+':dashboard/'+dashboardId for dashboardId in dashboardIdList]
            #Generate Anonymous Embed url
            response = quickSight.generate_embed_url_for_anonymous_user(
                     AwsAccountId = awsAccountId,
                     Namespace = 'default',
                     ExperienceConfiguration = {'Dashboard':{'InitialDashboardId':dashboardIdList[0]}},
                     AuthorizedResourceArns = dashboardArnList,
                     SessionLifetimeInMinutes = 60
                 )
            return response
        

        #Get AWS Account Id
        awsAccountId = context.invoked_function_arn.split(':')[4]
    
        #Read in the environment variables
        dashboardIdList = re.sub(' ','',os.environ['DashboardIdList']).split(',')
        dashboardNameList = os.environ['DashboardNameList'].split(',')
        dashboardRegion = os.environ['DashboardRegion']
    
        response={} 
    
        response = getQuickSightDashboardUrl(awsAccountId, dashboardIdList, dashboardRegion)
       
        return {'statusCode':200,
                'headers': {"Access-Control-Allow-Origin": "[CLOUD9URLPLACEHOLDER]",
                            "Content-Type":"text/plain"},
                'body':json.dumps(response)
                } 


    except Exception as e: #catch all
        return {'statusCode':400,
                'headers': {"Access-Control-Allow-Origin": "[CLOUD9URLPLACEHOLDER]",
                            "Content-Type":"text/plain"},
                'body':json.dumps('Error: ' + str(e))
                }     
```

Replace `[CLOUD9URLPLACEHOLDER]` with the value of the Cloud9 domain (https://#######################.vfs.cloud9.us-east-1.amazonaws.com) that we obtained at the start of this step.

Next, go to **configuration** tab and in the General configuration select **Edit** button. Increase the timeout from 3 to 30 sec and select **Save** button.

Then, go to the Environment variables and select Edit button. Add the following environment variables and select Save button.

- DashboardIdList : <YOUR_DASHBOARD_ID> you obtained on Step 2, in the format `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`
- DashboardNameList : `My Awesome Dashboard`
- DashboardRegion : `us-east-1`

Your configuration should look **similar** to the example from the image below:

![](./Images/Picture2.png)

Next go back to the Code tab and select Deploy button.

## Step 4: Setup API Gateway to invoke AnonymousEmbedFunction Lambda function

1.	In your AWS console, go to **API Gateway**, find a **REST API** section and select **Build** button.
In the **Create new API** section select **New API**. In the API name enter **QuicksightAnonymousEmbed** and select **Create API** button (see the picture below)

![](./Images/Picture3.png)

2.	Select **Actions** button and select **Create Resource** and enter **anonymous-embed** in the **Resource Name**. Next, select **Enable API Gateway CORS** and **Create Resource**.
3.	Select **anonymous-embed** resource and select **Action** button, then select **Create Method** and choose **GET**. 
In the **GET** method setup select **Lambda Function** as an integration type, enable **Lambda proxy integration** option and in the field **Lambda Function** search for previously created **AnonymousEmbedFunction**. Click **Save** and **OK** (See the picture below).

![](./Images/Picture4.png)

<<<<<<< HEAD
=======
![](./Images/Picture5.png)

>>>>>>> 6e53502127772723324d561235deec7ec827e85e
4.	To deploy the API, follow these steps:
-	Click on the *Actions* button and select Deploy API
-	In the Deployment stage select the option *[New Stage]*
-	Give your new stage a name, such as *embed*, and click on the Deploy button.

## Step 5: In Amazon QuickSight, add your domain to the allowed your domains

Open QuickSight, click on the user icon at the top right hand side and go to Manage Quicksight:
![](./Images/qs-6.png)
Next, add the Cloud9 hostname that was obtained on Step 3 following sequence of steps from the image below:
![](./Images/qs-7.png)

## Step 6: Turn on capacity pricing

On the **Manage QuickSight** screen, go to **Your Subscriptions**. Next, select **Get monthly subscription** in the **Capacity pricing** section and select **Confirm subscription** button.

Verify if the QuickSight version is set to **Enterprise**. On the top left hand side, you should see the QuickSight version:
![](./Images/qs-8.png)

## Step 7: Call Amazon API Gateway from your React application

Open a terminal inside your Cloud9 instance and type the following commands: 
```
cd quicksightembedreact
npm i amazon-quicksight-embedding-sdk
```
<<<<<<< HEAD
Replace the contents of your App.css file, that is used to style and layout your web page, with the content from the code snipped below:
=======
Replace the contents of your **App.css** file, that is used to style and layout your web page, with the content from the code snipped below:

>>>>>>> 6e53502127772723324d561235deec7ec827e85e
```
body {
  background-color: #ffffff;
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
}

header {
  background-color: #f1f1f1;
  padding: 20px;
  text-align: center;
}

h1 {
  margin: 0;
}

main {
  margin: 20px;
  text-align: center;
}

p {
  margin-bottom: 20px;
}

a {
  color: #000000;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}
```

Replace the contents of your App.js file with the contents from the code snipped below:

```
import './App.css';
import * as React from 'react';
import { useEffect, useRef } from 'react';
import { createEmbeddingContext } from 'amazon-quicksight-embedding-sdk';

function App() {
  const dashboardRef = useRef([]);

  const embed = async (dashboardurl) => {
    const embeddingContext = await createEmbeddingContext();
    const { embedDashboard } = embeddingContext;
    const options = {
      url: dashboardurl,
      container: dashboardRef.current,
      scrolling: "no",
      height: "500px",
      width: "600px", footerPaddingEnabled: true, iconDisabled: true
    };

    embedDashboard(options)
  };

  useEffect(() => {
    fetch("YOUR_API_GATEWAY_INVOKE_URL/STAGE_NAME/RESOURCE_NAME"
    ).then((response) => response.json()
    ).then((response) => { embed(response.EmbedUrl) })
  }, [dashboardRef]);

  return (
   <>
      <header>
        <h1>Embedded <font color="orange">QuickSight</font>: Build Powerful Dashboards in React</h1>
      </header>
      <main>
        <p>Welcome to the Quicksight dashboard embedding sample page</p>
        <p>Please find below your embedded dashboard</p>
        <div ref={dashboardRef} />
      </main>
    </>
  );
};

export default App;
```
In your App.js file replace: `YOUR_API_GATEWAY_INVOKE_URL/STAGE_NAME/RESOURCE_NAME` with your Amazon API Gateway invoke URL and your resource name (ie."`https://xxxxxxxx.execute-api.xx-xxx-x.amazonaws.com/embed/anonymous-embed`". As a convenience, the image below shows how to obtain the URL:

![](./Images/apigw-url.png)

Your App.js contains a React component that embeds an Amazon QuickSight dashboard. Here is an overview of what each part of the code does:

1.	useState Hooks: used to define a state of the variable.
2.	useRef Hook: used to hold a reference to the DOM element where the QuickSight dashboard will be embedded.
3.	useEffect() Hook: The useEffect() hook is used to trigger the embedding of the QuickSight dashboard whenever the selected dashboard ID changes. It first fetches the dashboard URL for the selected ID from the Amazon QuickSight API using the fetch() method. Once the URL is retrieved, it calls the `embed()` function with the URL as the argument.
4. The purpose of `createEmbeddingContext` is to generate an embedding context object that can be used to configure and interact with the QuickSight embedding SDK. 

Now, it’s time to test your app. Start your application running `npm start` in your terminal. To preview your app, click on **Preview** and select **Preview Running Application**. If the dashboard doesn't load in the preview - click on the Pop into new Window button.

![](./Images/Cloud9_Step2.png)

![](./Images/Demo1.png)

![](./Images/Demo.png)
